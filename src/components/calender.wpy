<style type="less">
.wrapper {
    width: 100%;
    height: 100%;
    background: rgba(0,0,0, 0.5);
    position: fixed;
    top: 0;
    z-index: 10;
    .calendar {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background: #ffffff;
        .switch {
            display: flex;
            line-height: 80rpx;
            .time {
                flex: 5;
                text-align: center;
                font-size: 24rpx;
            }
            .icon {
                flex: 1;
                text-align: center;
                image {
                    width: 19rpx;
                    height: 30rpx;
                }
            }
        }
        .weeks {
            background: #ff7e00;
            box-sizing: border-box;
            padding: 0 30rpx;
            display: flex;
            width: 100%;
            .week-item {
              flex: 1;
              color: #ffffff;
              font-size: 28rpx;
              line-height: 60rpx;
              text-align: center;
            }
        }
        .days {
            margin-top: 15rpx;
            .day-week {
              width: 100%;
              height: 30rpx;
              display: flex;
              height: 80rpx;
              box-sizing: border-box;
              padding: 0 30rpx;
              .day {
                  position: relative;
                  text-align: center;
                  flex: 1;
                  outline: 1rpx solid #ffffff;
                  font-size: 24rpx;

                  .has-state {
                    line-height: 40rpx;
                    background: #4eb5f7;
                    .state {
                        color: #ffffff;
                    }
                  }
                  .no-state {
                    line-height: 80rpx;

                    &.true {
                        background: #cbe7f5;
                    }
                    &.false {
                        background: #edf8fe;
                    }
                  }
                  .able {
                    color: #030303;
                  }
                  .disable {
                    color: #b5b3b2;
                  }
              }
            }
        }
        /*确定取消*/
        .control {
            display: flex;
            padding: 20rpx 25rpx;
            .button {
                flex: 2;
                text-align: center;
                background: orange;
                color: #ffffff;
                font-size: 26rpx;
                height: 48rpx;
                line-height: 48rpx;
                border-radius: 5rpx;
            }
            .time {
                flex: 4;
                font-size: 20rpx;
                text-align: center;
            }
        }

    }
}

</style>
<template>
    <view class="wrapper" style="height: {{height}}px">
        <view class="calendar">
            <view class="switch">
                <view class="icon" data-type = '1' @tap="monthClick">
                    <image src="../img/prev.png" data-type = '1'></image>
                </view>
                <view class="time">{{year}}年{{month + 1}}月</view>
                <view class="icon" data-type = '2' @tap="monthClick">
                    <image src="../img/next.png" data-type = '2'></image>
                </view>
            </view>
            <view class="weeks">
              <repeat for="{{weeks}}" key="index" index="index" item="item">
                 <view class="week-item">{{item}}</view>
              </repeat>
            </view>
            <view class="days">
                <view class="day-week" wx:for="monthDay" wx:for-item="days" wx:for-index="index" wx:key="index" wx:if="{{monthDay[index].length > 0}}">
                    <view class="day" wx:if="{{type == 1}}" wx:for="{{monthDay[index]}}" wx:for-item="day" wx:for-index="dayindex" wx:key="dayindex" data-index="{{[index, dayindex]}}" @tap="chooseday">
                        <view class="has-state" wx:if="{{day.state}}" data-index="{{[index, dayindex]}}">
                            <text class="able" wx:if="{{day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                            <text class="state" data-index="{{[index, dayindex]}}">
                                {{day.state}}
                            </text>
                        </view>
                        <view class="no-state {{day.in}}" wx:if="{{!day.state}}" data-index="{{[index, dayindex]}}">
                             <text class="able" wx:if="{{day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                            <text class="disable" wx:if="{{!day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                        </view>
                    </view>
                    <view class="day" wx:if="{{type == 2}}" wx:for="{{monthDay[index]}}" wx:for-item="day" wx:for-index="dayindex" wx:key="dayindex" data-index="{{[index, dayindex]}}" @tap="singleday">
                        <view class="has-state" wx:if="{{day.state}}" data-index="{{[index, dayindex]}}">
                            <text class="able" wx:if="{{day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                            <text class="state" data-index="{{[index, dayindex]}}">
                                {{day.state}}
                            </text>
                        </view>
                        <view class="no-state {{day.in}}" wx:if="{{!day.state}}" data-index="{{[index, dayindex]}}">
                             <text class="able" wx:if="{{day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                            <text class="disable" wx:if="{{!day.disabled}}" data-index="{{[index, dayindex]}}">{{day.index}}<br /></text>
                        </view>
                    </view>
                </view>
            </view>

            <view class="control">
                <view class="button" @tap="cancel">取消</view>
                <view class="time" wx:if="{{date.length > 1}}">{{date[0]}} - {{date[1]}}</view>
                <view class="time" wx:if="{{date.length <= 1 }}">{{date[0]}}</view>
                <view class="button" @tap="sure">确定</view>
            </view>
        </view>
    </view>

</template>
<script>
    /*
        param : {
            index-tap : function,
            type: String (1:日租房, 2:时租房)
        }
    */
    import wepy from 'wepy'
    import util from '../utils/util'
    export default class Calender extends wepy.component {
        props = {
            type: Number,
            outdate: Array
        }
        computed = {
            outdate() {

                let allIndex = [];
                
                if(this.outdate) {
                    console.log(this.outdate, '*****in-date')
                    this.outdate.forEach((date) => {
                        this.monthDay.forEach((week, windex) => {
                            week.forEach((day, dindex) => {
                                if(day.__date == date) {
                                    let index = [windex, dindex]
                                    allIndex.push(index)
                                }
                            })
                        })
                    })
                    console.log(allIndex, 'index')
                    allIndex.forEach((index) => {
                        if(allIndex.length > 1) {
                            this.methods.chooseday.apply(this, ['', index])
                            //this.methods.chooseday('', index)
                        }
                        else {
                            this.methods.singleday.apply(this, ['', index])
                        }
                    })
                }
            }
        }
        data = {
            year: new Date().getFullYear(),
            month: new Date().getMonth(),
            weeks: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
            monthDay: [],
            date: [],
            first: [],
            height: 0
        }
        methods = {
            chooseday (e, outindex) {
                let index = outindex || e.target.dataset.index

                let dayObj = this.monthDay[index[0]][index[1]]
                if (dayObj.disabled) {
                    if (this.date.length === 0) {
                        this.first = index;
                        this.date.push(dayObj.__date)
                        this.monthDay[index[0]][index[1]].state = '入住'
                    }
                    else if (this.date.length === 1) {
                        if(index[0] < this.first[0]) {
                            this.date = []

                            this.date.push(dayObj.__date)
                            this.monthDay[this.first[0]][this.first[1]].state = ''
                            this.monthDay[index[0]][index[1]].state = '入住'
                            this.first = index
                        }
                        else {
                            if(index[1] <= this.first[1] &&index[0] == this.first[0]) {
                                this.date = []

                                this.date.push(dayObj.__date)


                                this.monthDay[this.first[0]][this.first[1]].state = ''


                                this.monthDay[index[0]][index[1]].state = '入住'
                                this.first = index
                            }
                            else if(index[1] > this.first[1] && index[0] == this.first[0]) {
                                this.date.push(dayObj.__date)
                                let dates = util.dateUtils.filterWeek(this.date)

                                this.monthDay.forEach((week) => {
                                    week.forEach((day) => {
                                        dates.forEach((date) => {
                                            if(!day.state && date == day.__date) {
                                                day.in = true;
                                            }
                                        })
                                    })
                                })

                                this.monthDay[index[0]][index[1]].state = '离店'
                            }
                            else {
                                this.date.push(dayObj.__date)
                                let dates = util.dateUtils.filterWeek(this.date)

                                this.monthDay.forEach((week) => {
                                    week.forEach((day) => {
                                        dates.forEach((date) => {
                                            if(!day.state && date == day.__date) {
                                                day.in = true;
                                            }
                                        })
                                    })
                                })

                                this.monthDay[index[0]][index[1]].state = '离店'
                            }
                        }


                    }
                    else {
                        this.date = []
                        this.first = index
                        this.date.push(dayObj.__date)
                        this.monthDay.forEach((week) => {
                            week.forEach((day) => {
                                day.state = '';
                                day.in = false;
                            })
                        })
                        this.monthDay[index[0]][index[1]].state = '入住'
                    }
                    this.$apply()
                }
                else {
                    return false
                }
            },
            singleday (e, outindex) {
                let index = outindex || e.target.dataset.index
                let dayObj = this.monthDay[index[0]][index[1]]
                
                if (dayObj.disabled) {
                    this.monthDay.forEach((week) => {
                        week.forEach((day) => {
                            day.state = '';
                            day.in = false;
                        })
                    })
                    if (this.date.length === 0) {
                        this.first = index;
                        this.date.push(dayObj.__date)
                        this.monthDay[index[0]][index[1]].state = '入住'
                    }
                    else {
                        this.date = []
                        this.date.push(dayObj.__date)
                        this.monthDay[this.first[0]][this.first[1]].state = ''
                        this.monthDay[index[0]][index[1]].state = '入住'
                        this.first = index
                    }
                    
                    this.$apply()
                }
                else {
                    return false
                }
            },
            dealMonth (year, month) {
                let newArray = [];
                let yearConfig = {
                    year: year,
                    month: month
                }
                let monthDay = util.dateUtils.calendar(yearConfig)
                monthDay.forEach((week, windex) => {
                    week.forEach((day, dindex) => {
                        day.in = false
                    })
                })
                return monthDay
            },
            monthClick (e) {
                let type = e.target.dataset.type
                this.month = type == 1 ? this.month - 1 : this.month + 1;

                if (this.month < 0) {
                    this.year = this.year - 1;
                    this.month = 11;
                }
                if (this.month > 11) {
                    this.month = 0;
                    this.year = this.year + 1;
                }
                this.monthDay = this.methods.dealMonth(this.year, this.month)
            },
            cancel (e) {
                // this.monthDay.forEach((week) => {
                //     week.forEach((day) => {
                //         day.state = '';
                //         day.in = false;
                //     })
                // })
                this.$emit('index-tap', false, '')
            },
            sure (e) {
                let oType = wepy.getStorageSync('oType')
                if(this.date.length < 2 && oType == 'a') {
                    wepy.showToast({
                         title: '请选择离店日期',
                         icon: 'none'
                    }) 
                    return false
                }
                else {
                    this.monthDay.forEach((week) => {
                        week.forEach((day) => {
                            day.state = '';
                            day.in = false;
                        })
                    })
                    this.$emit('index-tap', true, this.date)
                }
                
            }
        }
        onLoad() {
            this.monthDay = this.methods.dealMonth(this.year, this.month)
            
            let sysInfo = wepy.getSystemInfoSync()
            this.height = sysInfo.screenHeight;

        }
    }
</script>
